/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export interface PostPrereviewBodyRequestBody {
  doi: string;
  authors?: {}[];
  is_hidden?: boolean;
  content?: {}[];
}

export type GetResolveProps = Omit<GetProps<void, unknown, void, void>, "path">;

/**
 * Endpoint to resolve preprint metadata
 */
export const GetResolve = (props: GetResolveProps) => (
  <Get<void, unknown, void, void>
    path={`/resolve`}
    
    {...props}
  />
);

export type UseGetResolveProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

/**
 * Endpoint to resolve preprint metadata
 */
export const useGetResolve = (props: UseGetResolveProps) => useGet<void, unknown, void, void>(`/resolve`, props);


export interface PostPreprintsRequestBody {
  doi?: string;
  title?: string;
  server?: string;
  url?: string;
  pdfUrl?: string;
}

export type PostPreprintsProps = Omit<MutateProps<void, unknown, void, PostPreprintsRequestBody, void>, "path" | "verb">;

/**
 * Endpoint to post preprints
 */
export const PostPreprints = (props: PostPreprintsProps) => (
  <Mutate<void, unknown, void, PostPreprintsRequestBody, void>
    verb="POST"
    path={`/preprints`}
    
    {...props}
  />
);

export type UsePostPreprintsProps = Omit<UseMutateProps<void, unknown, void, PostPreprintsRequestBody, void>, "path" | "verb">;

/**
 * Endpoint to post preprints
 */
export const usePostPreprints = (props: UsePostPreprintsProps) => useMutate<void, unknown, void, PostPreprintsRequestBody, void>("POST", `/preprints`, props);


export interface GetPreprintsQueryParams {
  start?: number;
  end?: number;
  asc?: boolean;
  sort_by?: string;
  from?: string;
  to?: string;
}

export type GetPreprintsProps = Omit<GetProps<void, unknown, GetPreprintsQueryParams, void>, "path">;

/**
 * Endpoint to get preprints
 */
export const GetPreprints = (props: GetPreprintsProps) => (
  <Get<void, unknown, GetPreprintsQueryParams, void>
    path={`/preprints`}
    
    {...props}
  />
);

export type UseGetPreprintsProps = Omit<UseGetProps<void, unknown, GetPreprintsQueryParams, void>, "path">;

/**
 * Endpoint to get preprints
 */
export const useGetPreprints = (props: UseGetPreprintsProps) => useGet<void, unknown, GetPreprintsQueryParams, void>(`/preprints`, props);


export interface GetPreprintResponse {
  statusCode?: number;
  status?: "ok";
  data?: {
  doi?: string;
  title?: string;
  server?: string;
  url?: string;
  pdfUrl?: string;
}[];
}

export interface GetPreprintPathParams {
  id: number
}

export type GetPreprintProps = Omit<GetProps<GetPreprintResponse, void, void, GetPreprintPathParams>, "path"> & GetPreprintPathParams;

/**
 * Endpoint to get a single preprint
 */
export const GetPreprint = ({id, ...props}: GetPreprintProps) => (
  <Get<GetPreprintResponse, void, void, GetPreprintPathParams>
    path={`/preprints/${id}`}
    
    {...props}
  />
);

export type UseGetPreprintProps = Omit<UseGetProps<GetPreprintResponse, void, void, GetPreprintPathParams>, "path"> & GetPreprintPathParams;

/**
 * Endpoint to get a single preprint
 */
export const useGetPreprint = ({id, ...props}: UseGetPreprintProps) => useGet<GetPreprintResponse, void, void, GetPreprintPathParams>((paramsInPath: GetPreprintPathParams) => `/preprints/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutPreprintPathParams {
  id: number
}

export type PutPreprintProps = Omit<MutateProps<void, unknown, void, void, PutPreprintPathParams>, "path" | "verb"> & PutPreprintPathParams;

/**
 * Endpoint to update preprints
 */
export const PutPreprint = ({id, ...props}: PutPreprintProps) => (
  <Mutate<void, unknown, void, void, PutPreprintPathParams>
    verb="PUT"
    path={`/preprints/${id}`}
    
    {...props}
  />
);

export type UsePutPreprintProps = Omit<UseMutateProps<void, unknown, void, void, PutPreprintPathParams>, "path" | "verb"> & PutPreprintPathParams;

/**
 * Endpoint to update preprints
 */
export const usePutPreprint = ({id, ...props}: UsePutPreprintProps) => useMutate<void, unknown, void, void, PutPreprintPathParams>("PUT", (paramsInPath: PutPreprintPathParams) => `/preprints/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeletePreprintProps = Omit<MutateProps<void, unknown, void, string, void>, "path" | "verb">;

/**
 * Endpoint to delete preprints
 */
export const DeletePreprint = (props: DeletePreprintProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/preprints`}
    
    {...props}
  />
);

export type UseDeletePreprintProps = Omit<UseMutateProps<void, unknown, void, string, void>, "path" | "verb">;

/**
 * Endpoint to delete preprints
 */
export const useDeletePreprint = (props: UseDeletePreprintProps) => useMutate<void, unknown, void, string, void>("DELETE", `/preprints`, {   ...props });


export type GetUsersProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetUsers = (props: GetUsersProps) => (
  <Get<void, unknown, void, void>
    path={`/users`}
    
    {...props}
  />
);

export type UseGetUsersProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetUsers = (props: UseGetUsersProps) => useGet<void, unknown, void, void>(`/users`, props);


export interface GetUserPathParams {
  id: number
}

export type GetUserProps = Omit<GetProps<void, unknown, void, GetUserPathParams>, "path"> & GetUserPathParams;

export const GetUser = ({id, ...props}: GetUserProps) => (
  <Get<void, unknown, void, GetUserPathParams>
    path={`/users/${id}`}
    
    {...props}
  />
);

export type UseGetUserProps = Omit<UseGetProps<void, unknown, void, GetUserPathParams>, "path"> & GetUserPathParams;

export const useGetUser = ({id, ...props}: UseGetUserProps) => useGet<void, unknown, void, GetUserPathParams>((paramsInPath: GetUserPathParams) => `/users/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutUserPathParams {
  id: number
}

export interface PutUserRequestBody {
  name?: string;
  email?: string;
}

export type PutUserProps = Omit<MutateProps<void, unknown, void, PutUserRequestBody, PutUserPathParams>, "path" | "verb"> & PutUserPathParams;

export const PutUser = ({id, ...props}: PutUserProps) => (
  <Mutate<void, unknown, void, PutUserRequestBody, PutUserPathParams>
    verb="PUT"
    path={`/users/${id}`}
    
    {...props}
  />
);

export type UsePutUserProps = Omit<UseMutateProps<void, unknown, void, PutUserRequestBody, PutUserPathParams>, "path" | "verb"> & PutUserPathParams;

export const usePutUser = ({id, ...props}: UsePutUserProps) => useMutate<void, unknown, void, PutUserRequestBody, PutUserPathParams>("PUT", (paramsInPath: PutUserPathParams) => `/users/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeleteUserProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const DeleteUser = (props: DeleteUserProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/users`}
    
    {...props}
  />
);

export type UseDeleteUserProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useDeleteUser = (props: UseDeleteUserProps) => useMutate<void, unknown, void, number, void>("DELETE", `/users`, {   ...props });


export type PostPrereviewProps = Omit<MutateProps<void, unknown, void, PostPrereviewBodyRequestBody, void>, "path" | "verb">;

export const PostPrereview = (props: PostPrereviewProps) => (
  <Mutate<void, unknown, void, PostPrereviewBodyRequestBody, void>
    verb="POST"
    path={`/prereviews`}
    
    {...props}
  />
);

export type UsePostPrereviewProps = Omit<UseMutateProps<void, unknown, void, PostPrereviewBodyRequestBody, void>, "path" | "verb">;

export const usePostPrereview = (props: UsePostPrereviewProps) => useMutate<void, unknown, void, PostPrereviewBodyRequestBody, void>("POST", `/prereviews`, props);


export type GetPrepreviewsProps = Omit<GetProps<void, unknown, void, void>, "path">;

export const GetPrepreviews = (props: GetPrepreviewsProps) => (
  <Get<void, unknown, void, void>
    path={`/prereviews`}
    
    {...props}
  />
);

export type UseGetPrepreviewsProps = Omit<UseGetProps<void, unknown, void, void>, "path">;

export const useGetPrepreviews = (props: UseGetPrepreviewsProps) => useGet<void, unknown, void, void>(`/prereviews`, props);


export interface GetPrereviewPathParams {
  id: string
}

export type GetPrereviewProps = Omit<GetProps<void, unknown, void, GetPrereviewPathParams>, "path"> & GetPrereviewPathParams;

export const GetPrereview = ({id, ...props}: GetPrereviewProps) => (
  <Get<void, unknown, void, GetPrereviewPathParams>
    path={`/prereviews/${id}`}
    
    {...props}
  />
);

export type UseGetPrereviewProps = Omit<UseGetProps<void, unknown, void, GetPrereviewPathParams>, "path"> & GetPrereviewPathParams;

export const useGetPrereview = ({id, ...props}: UseGetPrereviewProps) => useGet<void, unknown, void, GetPrereviewPathParams>((paramsInPath: GetPrereviewPathParams) => `/prereviews/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutPrereviewPathParams {
  id: string
}

export type PutPrereviewProps = Omit<MutateProps<void, unknown, void, PostPrereviewBodyRequestBody, PutPrereviewPathParams>, "path" | "verb"> & PutPrereviewPathParams;

export const PutPrereview = ({id, ...props}: PutPrereviewProps) => (
  <Mutate<void, unknown, void, PostPrereviewBodyRequestBody, PutPrereviewPathParams>
    verb="PUT"
    path={`/prereviews/${id}`}
    
    {...props}
  />
);

export type UsePutPrereviewProps = Omit<UseMutateProps<void, unknown, void, PostPrereviewBodyRequestBody, PutPrereviewPathParams>, "path" | "verb"> & PutPrereviewPathParams;

export const usePutPrereview = ({id, ...props}: UsePutPrereviewProps) => useMutate<void, unknown, void, PostPrereviewBodyRequestBody, PutPrereviewPathParams>("PUT", (paramsInPath: PutPrereviewPathParams) => `/prereviews/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeletePrereviewProps = Omit<MutateProps<void, unknown, void, string, void>, "path" | "verb">;

export const DeletePrereview = (props: DeletePrereviewProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/prereviews`}
    
    {...props}
  />
);

export type UseDeletePrereviewProps = Omit<UseMutateProps<void, unknown, void, string, void>, "path" | "verb">;

export const useDeletePrereview = (props: UseDeletePrereviewProps) => useMutate<void, unknown, void, string, void>("DELETE", `/prereviews`, {   ...props });


export interface PostGroupsRequestBody {
  name?: string;
}

export type PostGroupsProps = Omit<MutateProps<void, unknown, void, PostGroupsRequestBody, void>, "path" | "verb">;

export const PostGroups = (props: PostGroupsProps) => (
  <Mutate<void, unknown, void, PostGroupsRequestBody, void>
    verb="POST"
    path={`/groups`}
    
    {...props}
  />
);

export type UsePostGroupsProps = Omit<UseMutateProps<void, unknown, void, PostGroupsRequestBody, void>, "path" | "verb">;

export const usePostGroups = (props: UsePostGroupsProps) => useMutate<void, unknown, void, PostGroupsRequestBody, void>("POST", `/groups`, props);


export interface GetGroupsQueryParams {
  start?: number;
  end?: number;
  asc?: boolean;
  sort_by?: string;
  from?: string;
  to?: string;
}

export type GetGroupsProps = Omit<GetProps<void, unknown, GetGroupsQueryParams, void>, "path">;

export const GetGroups = (props: GetGroupsProps) => (
  <Get<void, unknown, GetGroupsQueryParams, void>
    path={`/groups`}
    
    {...props}
  />
);

export type UseGetGroupsProps = Omit<UseGetProps<void, unknown, GetGroupsQueryParams, void>, "path">;

export const useGetGroups = (props: UseGetGroupsProps) => useGet<void, unknown, GetGroupsQueryParams, void>(`/groups`, props);


export interface GetGroupQueryParams {
  start: number;
  end: number;
  asc: boolean;
  sort_by: string;
  from: string;
  to: string;
}

export interface GetGroupPathParams {
  id: number
}

export type GetGroupProps = Omit<GetProps<void, unknown, GetGroupQueryParams, GetGroupPathParams>, "path"> & GetGroupPathParams;

export const GetGroup = ({id, ...props}: GetGroupProps) => (
  <Get<void, unknown, GetGroupQueryParams, GetGroupPathParams>
    path={`/groups/${id}`}
    
    {...props}
  />
);

export type UseGetGroupProps = Omit<UseGetProps<void, unknown, GetGroupQueryParams, GetGroupPathParams>, "path"> & GetGroupPathParams;

export const useGetGroup = ({id, ...props}: UseGetGroupProps) => useGet<void, unknown, GetGroupQueryParams, GetGroupPathParams>((paramsInPath: GetGroupPathParams) => `/groups/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PutGroupPathParams {
  id: string
}

export interface PutGroupRequestBody {
  name?: string;
}

export type PutGroupProps = Omit<MutateProps<void, unknown, void, PutGroupRequestBody, PutGroupPathParams>, "path" | "verb"> & PutGroupPathParams;

export const PutGroup = ({id, ...props}: PutGroupProps) => (
  <Mutate<void, unknown, void, PutGroupRequestBody, PutGroupPathParams>
    verb="PUT"
    path={`/groups/${id}`}
    
    {...props}
  />
);

export type UsePutGroupProps = Omit<UseMutateProps<void, unknown, void, PutGroupRequestBody, PutGroupPathParams>, "path" | "verb"> & PutGroupPathParams;

export const usePutGroup = ({id, ...props}: UsePutGroupProps) => useMutate<void, unknown, void, PutGroupRequestBody, PutGroupPathParams>("PUT", (paramsInPath: PutGroupPathParams) => `/groups/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeleteGroupProps = Omit<MutateProps<void, unknown, void, string, void>, "path" | "verb">;

export const DeleteGroup = (props: DeleteGroupProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/groups`}
    
    {...props}
  />
);

export type UseDeleteGroupProps = Omit<UseMutateProps<void, unknown, void, string, void>, "path" | "verb">;

export const useDeleteGroup = (props: UseDeleteGroupProps) => useMutate<void, unknown, void, string, void>("DELETE", `/groups`, {   ...props });


export interface GetGroupMembersPathParams {
  id: string
}

export type GetGroupMembersProps = Omit<GetProps<void, unknown, void, GetGroupMembersPathParams>, "path"> & GetGroupMembersPathParams;

export const GetGroupMembers = ({id, ...props}: GetGroupMembersProps) => (
  <Get<void, unknown, void, GetGroupMembersPathParams>
    path={`/groups/${id}/members`}
    
    {...props}
  />
);

export type UseGetGroupMembersProps = Omit<UseGetProps<void, unknown, void, GetGroupMembersPathParams>, "path"> & GetGroupMembersPathParams;

export const useGetGroupMembers = ({id, ...props}: UseGetGroupMembersProps) => useGet<void, unknown, void, GetGroupMembersPathParams>((paramsInPath: GetGroupMembersPathParams) => `/groups/${paramsInPath.id}/members`, {  pathParams: { id }, ...props });


export interface PutGroupMemberPathParams {
  id: string;
  uid: string
}

export interface PutGroupMemberRequestBody {
  username?: string;
  password?: string;
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  role?: number;
}

export type PutGroupMemberProps = Omit<MutateProps<void, unknown, void, PutGroupMemberRequestBody, PutGroupMemberPathParams>, "path" | "verb"> & PutGroupMemberPathParams;

export const PutGroupMember = ({id, uid, ...props}: PutGroupMemberProps) => (
  <Mutate<void, unknown, void, PutGroupMemberRequestBody, PutGroupMemberPathParams>
    verb="PUT"
    path={`/groups/${id}/members/${uid}`}
    
    {...props}
  />
);

export type UsePutGroupMemberProps = Omit<UseMutateProps<void, unknown, void, PutGroupMemberRequestBody, PutGroupMemberPathParams>, "path" | "verb"> & PutGroupMemberPathParams;

export const usePutGroupMember = ({id, uid, ...props}: UsePutGroupMemberProps) => useMutate<void, unknown, void, PutGroupMemberRequestBody, PutGroupMemberPathParams>("PUT", (paramsInPath: PutGroupMemberPathParams) => `/groups/${paramsInPath.id}/members/${paramsInPath.uid}`, {  pathParams: { id, uid }, ...props });


export interface DeleteGroupMemberPathParams {
  id: string
}

export type DeleteGroupMemberProps = Omit<MutateProps<void, unknown, void, string, DeleteGroupMemberPathParams>, "path" | "verb"> & DeleteGroupMemberPathParams;

export const DeleteGroupMember = ({id, ...props}: DeleteGroupMemberProps) => (
  <Mutate<void, unknown, void, string, DeleteGroupMemberPathParams>
    verb="DELETE"
    path={`/groups/${id}/members`}
    
    {...props}
  />
);

export type UseDeleteGroupMemberProps = Omit<UseMutateProps<void, unknown, void, string, DeleteGroupMemberPathParams>, "path" | "verb"> & DeleteGroupMemberPathParams;

export const useDeleteGroupMember = ({id, ...props}: UseDeleteGroupMemberProps) => useMutate<void, unknown, void, string, DeleteGroupMemberPathParams>("DELETE", (paramsInPath: DeleteGroupMemberPathParams) => `/groups/${paramsInPath.id}/members`, {  pathParams: { id }, ...props });


export interface PostCommentsRequestBody {
  title?: string;
  contents?: string;
}[]

export type PostCommentsProps = Omit<MutateProps<void, unknown, void, PostCommentsRequestBody, void>, "path" | "verb">;

export const PostComments = (props: PostCommentsProps) => (
  <Mutate<void, unknown, void, PostCommentsRequestBody, void>
    verb="POST"
    path={`/comments`}
    
    {...props}
  />
);

export type UsePostCommentsProps = Omit<UseMutateProps<void, unknown, void, PostCommentsRequestBody, void>, "path" | "verb">;

export const usePostComments = (props: UsePostCommentsProps) => useMutate<void, unknown, void, PostCommentsRequestBody, void>("POST", `/comments`, props);

